1.关键词的解释
    平均查找长度:ASL
2.线性表的查找
    2.1顺序表的查找
        概念:从表的一端开始,依次将记录的关键字和给定的值进行比较,若某个记录的关键字和给定值,则查找成功。
        算法分析:
            即适应于顺序存储结构,又适用于线性表的链式存储结构。
        算法特点:
            ASL=(n+1)/2
            时间复杂度为O(n)
            优先:算法简单,对表结构无任何要求,既适用于顺序结构,又适用于链式结构。
            缺点:ASL较大,查找效率比较低,当n很大时,不宜采用顺序查找。
    2.2折半查找
        概念:折半查找也叫二分查找。表中元素有序,必须采用顺序结构
        过程:从表的中间记录开始查找,如果给定值和中间记录的关键字相等,则查找成功。如果给定的值大于中间记录的关键字,
              则在表中大于那一半中的记录。
        算法特点:
            时间复杂度为O(logn)
            优先:比较次数比顺序查找小,效率较高
            缺点:对表结构要求高,只能用于顺序存储的有序表。不适用于经常变动的线性表
    2.3 分块查找
        条件:将表分成几块,且表或者有序,或者分块有序
        若i<j则第j块的所有记录的关键字均大于第i块中的最大关键字
        建立索引表(每个结点含有最大关键字域和指定本块第一个结点的指针,且按关键字有序)
        算法特点:
            ASL=Lb+La ASLb=log(n/s+1) LA=2/s
            优点:比二分查找效率低,比顺序表查找效率高,插入和删除比较方便
            缺点:要增加一个索引表的存储空间并对初始索引表进行排序运算
            使用情况:如果线性表既要快速查找又经常动态变化,则可采用分块查找
            
3.树表的查找
    3.1 二叉排序树
        定义:二叉排序树时具有下列性质的二叉树或空树
            3.1.1 若她的左子树不空,则左子树上的所有结点的值均大于它的根节点的值
            3.1.2 若她的右子树不空,则右子树上的所有结点的值均小于它的根节点的值
            3.1.3 左子树和右子树均为二叉排序树
        算法分析
            ASL=(n+1)/2 最差情况 最好情况 ASL=logn
            优点:在查找的和折半查找相差不大,但就维护表的有序性可言,二叉排序树更加有效,因为无需移动记录,
                只需修改指针既可以完成对结点的插入和删除操作。因此,对于需要经常进行插入、删除、和查找的表,
                采用二叉排序树。